{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf430
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green26\blue178;\red96\green96\blue96;\red0\green36\blue171;
\red0\green40\blue165;}
\deftab560
\pard\pardeftab560\ql\qnatural

\f0\fs18 \cf0 //TODO: will need a stereo version of both play and env\
\
//note: both of these synthdefs end with the command .load(s);\
//This causes the synthdefs to be written to disk and auto-loaded by the given scsynth every time it starts.\
//It might be even better to have the synthdefs sent via an OSC message, \
//  so the scsynth can be a vanilla installation.\
\
//the ELplaybuf synth plays a buffer to a private bus, to be read by multiple ELenv synths.\
\
(\
\pard\pardeftab560\ql\qnatural
\cf2 SynthDef\cf0 (\cf3 "ELplaybuf"\cf0 , \{ \cf2 arg\cf0  outBus=0, bufNum=0, doLoop=0, ampScale=1.0, playbackRate=1.0, groupToFreeWhenDone;\
	var playbackSynth;\
	playbackSynth = \cf2 PlayBuf\cf0 .ar(1, bufNum, \cf2 BufRateScale\cf0 .kr(bufNum) * playbackRate, loop:doLoop);\
	\cf4 Free\cf0 .kr(Done.kr(playbackSynth), groupToFreeWhenDone); //free this synth's parent group\
	\cf2 Out\cf0 .ar(outBus, playbackSynth); //output to designated bus (not usually the hardware output)\
	\}).load(s);\
)\
\
//the stereo playbuf:\
(\
\cf2 SynthDef\cf0 (\cf3 "ELStereoPlaybuf"\cf0 , \{ \cf2 arg\cf0  outBus=0, bufNum=0, doLoop=0, ampScale=1.0, playbackRate=1.0, groupToFreeWhenDone;\
	var playbackSynth;\
	playbackSynth = \cf2 PlayBuf\cf0 .ar(2, bufNum, \cf2 BufRateScale\cf0 .kr(bufNum) * playbackRate, loop:doLoop);\
	\cf4 Free\cf0 .kr(Done.kr(playbackSynth), groupToFreeWhenDone); //free this synth's parent group\
	\cf2 Out\cf0 .ar(outBus, playbackSynth); //output to designated bus (not usually the hardware output)\
	\}).load(s);\
)\
\
//for each sound being played by an instance of the ELplaybuf synth:\
//1 instance of ELenv is created for EACH output channel.\
//They each read from the same private bus - the one to which the given ELplaybuf is being output.\
\
(\
SynthDef("ELenv", \{ arg inBus, outChannel=0, ampScale=1;\
	var input;\
	input = MulAdd(\cf5 In\cf0 .ar(inBus, 1), ampScale, 0);\
	Out.ar(outChannel, input);\
\}).load(s);\
)}