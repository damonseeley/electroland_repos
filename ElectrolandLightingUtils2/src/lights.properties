#Frame rate.
fps = 33

# create a single recipient with four channels
# better method: recipient.name = -class net.electroland.utils.lights.recipients.ARTNetRecipient -channels...
# that way we can dynamically load recipients that other people have invented.
ARTnetRecipient.datagate1 = -channels 512 channelBits 16 -address 127.0.0.1 -universe 1
HaleUDPRecipient.hale = -channels 300 channelBits 8 -address com1 -rate 30

# define a geometric layout of detectors channels (bound to four 2 pixel on a side detectors in a row)
fixtureType.PhilipsLEDBar.channels[0] = -boundary rectangle(0,0,2,2) -model net.electroland.lighting.detector.models.RedDetectionModel
fixtureType.PhilipsLEDBar.channels[1] = -boundary rectangle(2,0,2,2) -model net.electroland.lighting.detector.models.GreenDetectionModel
fixtureType.PhilipsLEDBar.channels[2] = -boundary rectangle(4,0,2,2) -model net.electroland.lighting.detector.models.BlueDetectionModel

# create fixtures
fixture.f1 = -type PhilipsLEDBar -startAddress 0 -tags mac:00:00:00,f1 -recipient datagate1
fixture.f2 = -type PhilipsLEDBar -startAddress 3 -tags mac:00:00:00,f2 -recipient hale

# create a 2 dimensional canvas to paint on
2Dcanvas.my2d = -height 2 -width 16 -bitdepth -colordepth

# consider using -class as per recipient, above?
# put fixtures on the canvas (translate the second 1, keep both the same scale)
my2d.fixture[0] = -fixture 1 -x 0 -y 0 -xScale 1.0 -yScale 1.0
my2d.fixture[1] = -fixture 2 -x 3 -y 0 -xScale 1.0 -yScale 1.0

# create a 3 dimensional canvas to paint on
3Dcanvas.my3d = -height 100 -width 100 -depth 100 -origin 50,50

my3d.fixture[0] = -fixture unit1 (etc.)
my3d.fixture[0] = -fixture unit1 (etc.)