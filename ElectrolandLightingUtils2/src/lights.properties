#Frame rate.
settings.global = -fps 33

# create RECIPIENTS (first is ARTNet, second is HaleUDP)
recipient.datagate1 = -class net.electroland.utils.lighting.protocols.ARTNetRecipient -channels 512 -channelBits 8 -address 127.0.0.1 -universe 1
#recipient.hale = -class net.electroland.util.lighting.protocols.HaleUDPRecipient -channels 300 channelBits 8 -address com1 -rate 30

# an TYPE of FIXTURE <-- this is an unnecessary type, for the most part.
fixtureType.PhilipsLEDBar = -channels 3

# the CHANNEL geomotry for a type of fixture
detector.c0 = -fixtureType PhilipsLEDBar -index 0 -boundary -x 0 -y 0 -w 2 -h 2 -model net.electroland.utils.lighting.detection.RedDetectionModel
detector.c1 = -fixtureType PhilipsLEDBar -index 1 -boundary -x 2 -y 0 -w 2 -h 2 -model net.electroland.utils.lighting.detection.GreenDetectionModel
detector.c2 = -fixtureType PhilipsLEDBar -index 2 -boundary -x 4 -y 0 -w 2 -h 2 -model net.electroland.utils.lighting.detection.BlueDetectionModel

# create FIXTURES (concrete instance of the a fixtureType, that is actually connected to a hardware recipient).
# tags can be used for macros like "turn on all mac:00:00:00" or "turn off f1"
# note that these are bound to recipients and fixtureTypes
fixture.f1 = -type PhilipsLEDBar -startAddress 0 -tags "mac:00:00:00 f1" -recipient datagate1
fixture.f2 = -type PhilipsLEDBar -startAddress 3 -tags "mac:00:00:00 f2" -recipient hale

# create a 2 dimensional CANVS to paint on
canvas.my2d = -class net.electroland.utils.lighting.canvas.ELUCanvas2D -height 2 -width 16

# MAP fixtures onto the canvas (translate the second 1, keep both the same scale)
# this requires a pointer to the ELUCanvas2D class that knows how to implement detector boundary to pixel mappings.
canvasFixture.cf0 = -canvas my2d -fixture f1 -x 0 -y 0 -xScale 1.0 -yScale 1.0
canvasFixture.cf1 = -canvas my2d -fixture f2 -x 3 -y 0 -xScale 1.0 -yScale 1.0