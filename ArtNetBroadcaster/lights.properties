# the system frame rate.
fps = 30

# scales the positions of each detector AND the size of the raster (to
# accomodate the newly positioned detectors). 1.0 when not specified.
#scalePositions = .25

# scales the dimensions of each detector. 1.0 when not specified.
#scaleDimensions = 1.0


#A fixture represents a lighting device.
#fixturesNum=fixtureID, DMXuniverse, totalChannels, rasterWidth, rasterHeight, protocol, [ip address], [port], [detectorGroup]
# fixtureId: 	This is what you should refer to in a light property when 
#				connecting a detector to a channel in a fixture. 
#			 	Also, it's what appears in the pull down menu in the 
#				DetectorManagerJPanel.

# DMXuniverse: 	The DMX universe this fixture is in.

# totalChannels:The number of channels of data this fixture requires.  In essence,
#				the total length of the data portion of the packet.

# rasterWidth: Default raster width.  This is the dimension BEFORE scaling 
#				occurs.

# rasterHeight: Default raster height.

# protocol:  	One of either 'HaleUDP' or 'ArtNet'

# The next args are dependent on protocol (above):

# if the protocol is 'HaleUDP':
#	ip address: HaleUDP controller IP address
#	port: 		HaleUDP Port
#	detectorGroup (optional): If a detector group is specified, all detectors 
#								that belong to that group are mapped to this fixture.
# if the protocol is 'ArtNet'
#	ip address: ArtNet controller IP address
#	detectorGroup (optional): If a detector group is specified, all detectors 
#								that belong to that group are mapped to this fixture.

# sample HaleUDP setup
fixture0  = fixture0, 1, 100, 150, 200, HaleUDP, 127.0.0.1, 8001, lightgroup0,0
fixture1  = fixture1, 1, 100, 200, 150, HaleUDP, 127.0.0.1, 8001, lightgroup1,0

# A detector represents a section of a raster that translates the pixels within
# it's boundaries into a single byte value that can be applied to any light
# in a fixture.  Detectors aren't tied to any light directly- as the same 
# bounding box or pattern of boxes may be reused across many fixtures- and therefore
# represent more than one light a piece.

# detectorID=x,y,width,height, detectionModelName, [detectorGroup], [channel]
# x:	the left corner of the detector on a raster (start at 0)
# y:	the top pixel for a detector on a raster (start at 0)
# width:	the width of the bounding box representing the detector
# height:	the height of the bounding box representing the detector
# detectionModelName: 	the class that will be used to transalte the pixels
#						within the detector into a single value to put in a packet.
#						e.g., a RedDetectionModel will take the average intensity
#						of the red channel of every pixel within a detector, and
#						and return that average value as a byte.
# detectorGroup (optional):	an arbitrary id for relating a bunch of detectors to each other as a set.
#					if a fixture is assigned a detector group, all detectors
#					marked with the same detector group will be added to that
#					fixture. multiple fixtures can use the same detector group,
#					in order to reapply a pattern of detectors across fixtures.
# channel (optional):	the channel this detectors data is sent to. 
#NOTE: if detectorGroup and channel are used, then light (below) may not be
# necessary.
detector0 =  50,  50, 20, 20, RedDetectionModel, lightgroup0, 0
detector1 = 100,  10, 20, 20, RedDetectionModel, lightgroup1, 0
detector2 =  10, 100, 20, 20, RedDetectionModel, lightgroup1, 0
detector3 =  10,  10, 20, 20, RedDetectionModel, lightgroup1, 0
detector4 = 100, 100, 20, 20, RedDetectionModel, lightgroup1, 0

# A light is ONE WAY of tying a detector to a light in a fixture.
# lightID=channel, fixture, detectorID
# lightID is just for uniqueness here.
# channel: the channel within the fixture where this light's data is read from.
# fixture: the fixture containing this light.
# detectorID: the id of the detector whose bounding area is used to determine the
#			  color of the light.