#global settings
settings.global = $pollrate 30 $suspect -1

# type definition
#  in this case, phoenix
#  this kind of device always has the extra values startRef and count.
#  * startRef is the starting register for data to be read from
#  * count is the number of registers to read starting from startRef.
iodeviceType.phoenix4DI8DO = $factory net.electroland.eio.devices.ModBusTCPSlaveDeviceFactory

# concrete instances of Phoenix bus coupler
iodevice.phoenix1 = $type phoenix4DI8DO $ipaddress 192.168.247.21 $startRef 192 $count 4

# alternately, maye we should just have a generalized thing to read, since all
# the patch attributes are the same whether or not it is digital or analong. InputChannel? like this:
ichannel.0 = $device phoenix1 $register 0 $datatype BYTES $endianness BIG $index 0 $tags i1 $x 623.18 $y 11.94 $z 0 $units meterPixels
ichannel.1 = $device phoenix1 $register 1 $datatype SHORT $endianness BIG          $tags i1 $x 623.18 $y 11.94 $z 0 $units meterPixels
ichannel.2 = $device phoenix1 $register 2 $datatype INT   $endianness BIG          $tags i1 $x 623.18 $y 11.94 $z 0 $units meterPixels
ichannel.3 = $device phoenix1 $register 3 $datatype BIT   $endianness BIG $index 0 $tags i1 $x 623.18 $y 11.94 $z 0 $units meterPixels

# The actual ichannel you'd access from the IOManager would look like this:
public class IChannel {

    public enum DataType {BOOLEAN, BYTE, SHORT, INTEGER};
    private Object value;
    private register, index;

    public Object getInput(){
        return value;
    }

    public boolean getState(){
        if (
    }

    public int getDataType(){
        if (Object instanceof Boolean){
            return BOOLEAN;
        } else if (Object instanceof Byte){
            return BYTE;
        } else if (Object instanceof Short){
            return SHORT;
        } else if (Object instanceof Integer){
            return INTEGER;
        }
    }

    public InputChannel(Boolean b){
        value = b;
    }
    public InputChannel(Byte b){
        value = b;
    }
    public InputChannel(Short s){
        value = s;
    }
    public InputChannel(Integer i){
        value = i;
    }
}